import React from 'react';
import { Table, Button, Space, Popconfirm, Tag, Tooltip, message } from 'antd';
import { EditOutlined, DeleteOutlined, QuestionCircleOutlined } from '@ant-design/icons';
import { Employee } from '../../models/bai2/employee';

interface EmployeeTableProps {
  employees: Employee[];
  onEdit: (employee: Employee) => void;
  onDelete: (id: string) => void;
  loading?: boolean;
}

/** ƒê·ªãnh d·∫°ng m√£ nh√¢n vi√™n ng·∫Øn g·ªçn h∆°n */
const formatEmployeeId = (id: string) => `NV-${id.slice(-4).toUpperCase()}`;

/** Hi·ªÉn th·ªã m√†u s·∫Øc cho tr·∫°ng th√°i nh√¢n vi√™n */
const getStatusColor = (status: string) =>
  status === 'ƒê√£ k√Ω h·ª£p ƒë·ªìng' ? 'green' : 'orange';

const EmployeeTable: React.FC<EmployeeTableProps> = ({ employees, onEdit, onDelete, loading }) => {
  const handleDelete = (id: string, name: string) => {
    onDelete(id);
    message.success(`üóëÔ∏è Nh√¢n vi√™n "${name}" ƒë√£ b·ªã x√≥a th√†nh c√¥ng!`);
  };

  const columns = [
    {
      title: 'M√£ NV',
      dataIndex: 'id',
      key: 'id',
      width: 120,
      render: (id: string) => (
        <Tooltip title={`M√£ nh√¢n vi√™n ƒë·∫ßy ƒë·ªß: ${id}`}>
          <Tag color="blue">{formatEmployeeId(id)}</Tag>
        </Tooltip>
      ),
    },
    {
      title: 'H·ªç t√™n',
      dataIndex: 'name',
      key: 'name',
      sorter: (a: Employee, b: Employee) => a.name.localeCompare(b.name),
    },
    {
      title: 'Ch·ª©c v·ª•',
      dataIndex: 'position',
      key: 'position',
    },
    {
      title: 'Ph√≤ng ban',
      dataIndex: 'department',
      key: 'department',
    },
    {
      title: 'L∆∞∆°ng',
      dataIndex: 'salary',
      key: 'salary',
      align: 'right' as const,
      sorter: (a: Employee, b: Employee) => a.salary - b.salary,
      render: (salary: number) => (
        <span style={{ fontWeight: 'bold', color: '#1890ff' }}>
          {salary.toLocaleString('vi-VN')} ‚Ç´
        </span>
      ),
    },
    {
      title: 'Tr·∫°ng th√°i',
      dataIndex: 'status',
      key: 'status',
      render: (status: string) => <Tag color={getStatusColor(status)}>{status}</Tag>,
    },
    {
      title: 'H√†nh ƒë·ªông',
      key: 'action',
      align: 'center' as const,
      width: 140,
      render: (_: any, record: Employee) => (
        <Space size="middle">
          {/* N√∫t ch·ªânh s·ª≠a */}
          <Tooltip title="Ch·ªânh s·ª≠a nh√¢n vi√™n">
            <Button
              type="primary"
              icon={<EditOutlined />}
              onClick={() => {
                onEdit(record);
                message.info(`‚úèÔ∏è ƒêang ch·ªânh s·ª≠a nh√¢n vi√™n "${record.name}"`);
              }}
            />
          </Tooltip>

          {/* N√∫t x√≥a (ch·ªâ hi·ªÉn th·ªã v·ªõi nh√¢n vi√™n th·ª≠ vi·ªác) */}
          {record.status === 'Th·ª≠ vi·ªác' ? (
            <Popconfirm
              title={`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh√¢n vi√™n "${record.name}"?`}
              onConfirm={() => handleDelete(record.id, record.name)}
              okText="X√≥a"
              cancelText="H·ªßy"
              icon={<QuestionCircleOutlined style={{ color: 'red' }} />}
            >
              <Tooltip title="X√≥a nh√¢n vi√™n">
                <Button type="primary" danger icon={<DeleteOutlined />} />
              </Tooltip>
            </Popconfirm>
          ) : (
            <Tooltip title="Kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n ƒë√£ k√Ω h·ª£p ƒë·ªìng">
              <Button type="default" disabled icon={<DeleteOutlined />} />
            </Tooltip>
          )}
        </Space>
      ),
    },
  ];

  return (
    <Table
      columns={columns}
      dataSource={employees}
      rowKey="id"
      loading={loading}
      pagination={{ pageSize: 10, showSizeChanger: true }}
      scroll={{ x: 'max-content' }}
      bordered // Hi·ªÉn th·ªã vi·ªÅn b·∫£ng
    />
  );
};

export default EmployeeTable;
